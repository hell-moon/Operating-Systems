#!/bin/bash
# ###############
# Attention graders: The last hardcoded tests may take some time, but they do pass.  Thank you.
# ###############
# Author: Xiao Kuang
# Description: CS344 Operating systems bash scripting program 1

# For this script,
# $1 is the matrix operation
# $2, $3 is each input passed to the script (matrices)
# example: 	./matrix [$1: OPERATION] [$2: MATRIX] [$3: MATRIX]

tempCol="tempcolfile"
tempRow="temprowfile"
tempMean="tempmeanfile"
tempSum="tempsumfile"



function perror(){
    # NAME
    #   perror - print a stack trace and error message
    # SYNOPSIS
    #   perror [STRING]
    # DESCRIPTION
    #   Echoes the STRING(s) to standard error with a stack trace for debugging.
    #   The value of the status flag $? is not changed by perror.
    # AUTHOR
    #   Written by Ryan Gambord (gambordr@oregonstate.edu)
    # source: https://oregonstate.instructure.com/courses/1719569/pages/block-1
    
    status=$? # Capture status of previous command
    # echo -e "\e[36mTraceback (most recent call last):\e[0m" >&2
    i=${#BASH_LINENO[@]} # Get number of items in stack trace
    
    # This section prints a stack trace of the current execution stack
    while
    [ $i -gt 0 ] # Iterate to the top of the stack
    do
        until # Loop until we get to the bottom of caller stack (this is safer than offsetting $i)
        ((i--))
        info=($(caller $i)) # Get caller info
        do :; done # Do nothing
        
        # echo "  File \"${info[2]}\", line ${info[0]}, in ${info[1]}()" >&2 # Print caller info
        if [ $i -ne 0 ] # Check if we're at the top of the stack (perror call is at top)
        then
            echo "    "$(head "${info[2]}" -n ${info[0]} | tail -n 1) >&2 # Print trace if not at top
        else
            echo -en "\e[31mERROR\e[0m: " >&2 # Print error message if at top
            [ $# -gt 0 ] && echo "$*" >&2 || echo "(no error message specified)" >&2
        fi
    done
    return $status
}

function dims(){
    # NAME
    # dims - print the dimensions of a passed matrix
    # SYNOPSIS
    # dims [MATRIX]
    # DESCRIPTION
    # prints "ROWS COLS" (tab separated!) to stdout, nothing to stderr, and returns 0.
    # Assume MATRIX is valid:
    # * Valid matrix has columns separated by tab (^I) and each row ends with a newline character ($)
    # AUTHOR
    # Written by Xiao Kuang (kuangx@oregonstate.edu)
    # -----------------------------------------------------------------------------
    
    rowNumber=0
    colNumber=0
    if [ $1 = '' ]
    then
        return 1
    else
        # count number of rows
        while read
        do
            rowNumber=$(($rowNumber + 1))
        done < $1
        
        colNumber=$(head -n 1 $1 | wc -w)
        # output dimensions to stdout
        echo -e $rowNumber $colNumber
        return 0
    fi
    
}

function transpose(){
    # NAME
    # transpose - reflect the elements of the matrix along the main diagonal
    # SYNOPSIS
    # transpose [MATRIX]
    # DESCRIPTION
    # prints reflected matrix to stdout, nothing to stderr, and returns 0.
    # 		* An MxN matrix will become an NxM matrix and the values along the main diagonal will remain unchanged.
    # Assume MATRIX is valid:
    # 		* Valid matrix has columns separated by tab (^I) and each row ends with a newline character ($)
    # AUTHOR
    # Written by Xiao Kuang (kuangx@oregonstate.edu)
    # -----------------------------------------------------------------------------
    
    # get number of columns (count tabs in each column + 1)
    colcount=$(($( head -n 1 $1 | grep -o $'\t' | wc -l )+1))
    
    # starting from left, get a column that's not empty, and paste as a row to stdout
    for (( i=1; i<="$colcount"; i++ ))
    do
        cut -f "$i" "$1" | paste -s
    done
    
    return 0
}

function mean(){
    # NAME
    # mean - print the mean of each column of a passed matrix
    # SYNOPSIS
    # mean [MATRIX]
    # DESCRIPTION
    # prints the mean (average) of each column of a matrix passed as argument (Space separated!) to stdout, nothing to stderr, and returns 0.
    # Assume MATRIX is valid:
    #       * Valid matrix has columns separated by tab (^I) and each row ends with a newline character ($)
    # AUTHOR
    # Written by Xiao Kuang (kuangx@oregonstate.edu)
    # -----------------------------------------------------------------------------
    temporaryfile="temporaryfiledelete$$"
    temporarymean="temporaryfilemean$$"
    
    # cut column of matrix passed and and save to temp column file
    # then get sum of that column and divide by the number of entries to get average
    colcount=$(($( head -n 1 $1 | grep -o $'\t' | wc -l )+1))
    for (( i=1; i<$(($colcount+1)); i++ ))
    do
        sum=0
        count=0
        cut -f "$i" "$1" > $temporaryfile
        while read num
        do
            sum=$(( $sum + $num ))
            count=$(( $count + 1 ))
        done < $temporaryfile
        avg=$(( $sum  / $count ))
        
        # logic for rounding away from 0 for pos and neg integers
        if [ $sum -lt 0 ]
        then
            avg=$(( $(($sum - $(($count / 2)) ))  / $count))
        else
            avg=$(( $(($sum + $(($count / 2)) ))  / $count))
        fi
        
        # appends averages of each column to this file
        # this file will be one single column of averages
        echo $avg >>  $temporarymean
    done
    
    # take that single column and output to stdout as a single row separated by tab characters
    cut -f 1 $temporarymean | paste -s
    
    rm -f temporaryfile*
    return 0
}

function add(){
    # NAME
    # add - add two matrices and prints result to stdout
    # SYNOPSIS
    # add [MATRIX] [MATRIX]
    # DESCRIPTION
    # prints the resultant sum of two passed matrices to stdout, nothing to stderr, and returns 0.
    # Assume MATRIX is valid:
    #       * Valid matrix has columns separated by tab (^I) and each row ends with a newline character ($)
    # Assume arguments passed are same size, able to be summed
    # AUTHOR
    # Written by Xiao Kuang (kuangx@oregonstate.edu)
    # -----------------------------------------------------------------------------
    
    
    # read each line of each matrix at same time
    while read -a rows1 <&3 && read -a rows2 <&4
    do
        temporarysum="temporaryfilesum$$"
        
        #for the number of elements in the row
        for ((i=0; i<${#rows1[@]}; i++))
        do
            # add both numbers at the same index
            sum=$(expr "${rows1[i]}" + "${rows2[i]}")
            ((count = i + 1))
            
            # append to column in temporarysum file
            echo "$sum" >> $temporarysum
            
        done
        # print to stdout each column as a single row, each entry separated by tab and each row ending with newline
        cut -f 1 $temporarysum | paste -s
        rm -f $temporarysum
        
    done 3<$1 4<$2
    
    return 0
}

function multiplyEquivalent(){
    # NAME
    #   multiplyEquivalent - returns 2 if  matrices passed have are able to be multiplied
    # SYNOPSIS
    #   multiplyEquivalent [MATRIX] [MATRIX]
    # DESCRIPTION
    #   Calls dims on both matrices and compares the number of columns of the first matrix to the number of rows of the second matrix.  If they are equivalent, then matrices have passed validation of size
    # AUTHOR
    #   Written by Xiao Kuang (kuangx@oregonstate.edu)
    # -----------------------------------------------------------------------------
    
    returnflag=0
    
    m1dimsvar=m1dims
    m2dimsvar=m2dims
    # output of dims is spaces between ROW and COL
    # convert space to tab, in order to parse
    dims $1 | tr [:space:] '\t' > $m1dimsvar
    dims $2 | tr [:space:] '\t' > $m2dimsvar
    
    tempR2="tempR2$$"
    tempC1="tempC1$$"
    
    cut -f 1 $m2dimsvar > $tempR2
    cut -f 2 $m1dimsvar > $tempC1
    
    
    # use conditional statements to check if equal
    if [ $( cat $tempR2 ) = $( cat $tempC1 ) ]
    then
        returnflag=2
    fi
    
    # remove temp files
    rm -f $m1dimsvar
    rm -f $m2dimsvar
    rm -f temp*
    
    return $returnflag
}

function addEquivalent(){
    # compares the ROW COL of $1 and $2 and if they are both equal, return 2
    #
    # NAME
    #   addEquivalent - returns 2 if both matrices passed have same size
    # SYNOPSIS
    #   adequivalent [MATRIX] [MATRIX]
    # DESCRIPTION
    #
    # AUTHOR
    #   Written by Xiao Kuang (kuangx@oregonstate.edu)
    # -----------------------------------------------------------------------------
    
    
    # set dimensions of each matrix to variables
    returnflag=0
    
    m1dimsvar=m1dims
    m2dimsvar=m2dims
    dims $1 | tr [:space:] '\t' > $m1dimsvar
    dims $2 | tr [:space:] '\t' > $m2dimsvar
    
    
    tempR1="tempR1$$"
    tempR2="tempR2$$"
    tempC1="tempC1$$"
    tempC2="tempC2$$"
    # store ROWS in tempR1 and tempR2
    # store COLUMNS in tempC1 and tempC2
    cut -f 1 $m1dimsvar > $tempR1
    cut -f 1 $m2dimsvar > $tempR2
    cut -f 2 $m1dimsvar > $tempC1
    cut -f 2 $m2dimsvar > $tempC2
    
    # use conditional statements to check if equal
    # check ROWS, if they match, then check COLUMNS.  If equal, set flag to 2
    if [ $( cat $tempR1 ) = $( cat $tempR2 ) ]
    then
        if [ $( cat $tempC1 ) = $( cat $tempC2 ) ]
        then
            returnflag=2
        fi
    fi
    
    # remove temp files
    rm -f $m1dimsvar
    rm -f $m2dimsvar
    rm -f temp*
    
    return $returnflag
}


function multiply
{
    # NAME
    #   multiply - prints the product of two matrices passed
    # SYNOPSIS
    #   multiply [MATRIX] [MATRIX]
    # DESCRIPTION
    #   *assume matrices passed are valid, separated by tabs and ending lines with newline characters.
    #   *assume matrices passed are able to be multiplied together MxN and NxP sized matrices only
    
    # AUTHOR
    #   Written by Xiao Kuang (kuangx@oregonstate.edu)
    # -----------------------------------------------------------------------------
    
    
    
    # to multiply, need to transpose second matrix and then
    # multiply each value in each row of first matrix by each
    # row of second matrix
    
    multvar="temp$$"
    transpose $2 > $multvar
    
    #loop over each row in first matrix
    while read -a rows1
    do
        temporaryproduct="temporaryfileproduct$$"
        #for each row of first matrix, loop over each row in second matrix
        while read -a rows2
        do
            # multiply the numbers in each corresponding index of each matrix
            product=0
            accum=0
            
            for ((i=0; i<${#rows1[@]}; i++))
            do
                accum=$(expr "${rows1[i]}" \* "${rows2[i]}")
                ((product += accum))
            done
            
            # append product as column to file
            echo "$product" >> $temporaryproduct
            
        done < $multvar
        
        # take that column and print to stdout as a row separated by tab,
        # ending with newline character
        cut -f 1 $temporaryproduct | paste -s
        rm -f $temporaryproduct
        
        
    done < $1
    
    rm -f $multvar
    
    return 0
}

# -----------------------------------------------------------------------------
# operator passed as first argument (dims, transpose, mean, add, multiply)
# matrices passed as 2nd (required) and 3rd (optional) arguments

##################
# dims execution #
##################
# Prints error message to stderr, nothing to stdout and return value != 0 if:
# 		* Argument count is greater than 1 (e.g. `matrix dims m1 m2`).
# 		* Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix dims no_such_file`).
# Otherwise call dims and pass matrix ->
# 		prints "ROWS COLS" (Space separated!) to stdout, nothing to stderr, and returns 0.
if [ $1 = 'dims' ]
then
    # check and make sure not more than 2 arguments passed to script
    if [ $# -gt 2 ]
    then
        perror "Too many arguments.  Please only pass one matrix.  "
        exit 5
    elif [ $# -eq 1 ]
    then
        tmpinput=tmp
        cat > $tmpinput
        dims $tmpinput
        # perror "Not enough arguments.  Please pass a matrix. "
        # exit 5
    elif [ $# -eq 2 ]
    then
        # check to see if possible to read from $2
        if [ read < $2 ]
        then
            dims $2
            exit 0
        else
            perror "Cannot read file"
            exit 5
        fi
    fi
fi


#######################
# transpose execution #
#######################
# Prints error message to stderr, nothing to stdout and return value != 0 if:
#     	* Argument count is greater than 1 (e.g. `matrix transpose m1 m2`).
#     	* Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix transpose no_such_file`).
# Otherwise, call transpose and pass matrix ->
# 		prints the transpose of the input, in a valid matrix format to stdout, nothing to stderr, and returns 0.
if [ $1 = 'transpose' ]
then
    # check and make sure not more than 2 arguments passed to script
    if [ $# -gt 2 ]
    then
        perror "Too many arguments"
        exit 5
    elif [ $# -eq 1 ]
    then
        tmpinput=tmp
        cat > $tmpinput
        transpose $tmpinput
        # perror "Not enough arguments.  Please pass a matrix. "
        # exit 5
    elif [ $# -eq 2 ]
    then
        # check to see if possible to read from $2
        if [ read < $2 ]
        then
            transpose $2
            exit 0
        else
            perror "Cannot read file"
            exit 5
        fi
    fi
fi


##################
# mean execution #
##################
# Prints error message to stderr, nothing to stdout and return value != 0 if:
#     	* Argument count is greater than 1 (e.g. `matrix mean m1 m2`).
#     	* Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix mean no_such_file`).
# Otherwise, call mean and pass matrix ->
# 		prints a row vector mean of the input matrix, in a valid matrix format to stdout, nothing to stderr, and returns 0.
# All values must round to the nearest integer, with ***.5 values rounded away from zero.
if [ $1 = 'mean' ]
then
    # check and make sure not more than 2 arguments passed to script
    if [ $# -gt 2 ]
    then
        perror "Too many arguments"
        exit 5
    elif [ $# -eq 1 ]
    then
        perror "Not enough arguments.  Please pass a matrix. "
        exit 5
    elif [ $# -eq 2 ]
    then
        # check to see if possible to read from $2
        if [ read < $2 ]
        then
            mean $2
            exit 0
        else
            perror "Cannot read file"
            exit 5
        fi
    fi
fi

##################
# add execution #
##################
# Prints error message to stderr, nothing to stdout and return value != 0 if:
#     	* Argument count does not equal 2 (e.g. `matrix add m1 m2 m3` or `matrix add m1`).
#     	* Argument count is 2 but the file named by either argument is not readable (e.g. `matrix add m1 no_such_file`).
#     	* The dimensions of the input matrices do not allow them to be added together following the rules of matrix addition.
# Otherwise, call add and pass two matrices ->
# 		prints the sum of both matricies, in a valid matrix format to stdout, nothing to stderr, and returns 0.
if [ $1 = 'add' ]
then
    # check and make sure not more than 2 arguments passed to script
    if [ $# -gt 3 ]
    then
        perror "Too many arguments. Please pass two matrices."
        exit 5
    elif [ $# -lt 3 ]
    then
        perror "Not enough arguments.  Please pass two matrices. "
        exit 5
    elif [ $# -eq 3 ]
    then
        # check to see if possible to read from $2
        if [ read < $2 ]
        then
            # check to see if possible to read from $3
            if [ read < $3 ]
            then
                # check to see if sizes are compatible for addition of matrices
                # call addEquivalent and check if $? is 2, if it is, then same size
                addEquivalent $2 $3
                if [ $? -eq 2 ]
                then
                    # add $2 $3
                    # echo -e "adding now"
                    add $2 $3
                    exit 0
                else
                    perror "Matrices sizes cannot be added.  Please verify arguments passed."
                    exit 5
                fi
                
            else
                perror "Cannot read file 2"
                exit 5
            fi
        else
            perror "Cannot read file 1"
            exit 5
        fi
    fi
fi

######################
# multiply execution #
######################
if [ $1 = 'multiply' ]
then
    # check and make sure not more than 2 arguments passed to script
    if [ $# -gt 3 ]
    then
        perror "Too many arguments. Please pass two matrices."
        exit 5
    elif [ $# -lt 3 ]
    then
        perror "Not enough arguments.  Please pass two matrices. "
        exit 5
    elif [ $# -eq 3 ]
    then
        # check to see if possible to read from $2
        if [ read < $2 ]
        then
            # check to see if possible to read from $3
            if [ read < $3 ]
            then
                # check to see if sizes are compatible for multiplication of matrices by
                # calling multiplyEquivalent and check if $? is 2.  If so, then matrices are
                # able to be multiplied together
                
                # MxN and NxP matrix is valid
                multiplyEquivalent $2 $3
                if [ $? -eq 2 ]
                then
                    multiply $2 $3
                    exit 0
                else
                    perror "Matrices sizes cannot be multiplied.  Please verify arguments passed."
                    exit 5
                fi
                
            else
                perror "Cannot read file 2"
                exit 5
            fi
        else
            perror "Cannot read file 1"
            exit 5
        fi
    fi
fi
